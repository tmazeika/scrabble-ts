"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function loadDictionary() {
    return __awaiter(this, void 0, void 0, function* () {
        const resp = yield fetch('/scrabble/dictionary.txt');
        const text = yield resp.text();
        return text.split('\n')
            .filter(line => line !== '')
            .map(line => [...line].map(letter => letter));
    });
}
loadDictionary().then(dict => {
    console.log(dict[5]);
});
const MAX_RACK_LEN = 7;
const BOARD_SIZE = 15;
var Dir;
(function (Dir) {
    Dir["ACROSS"] = "across";
    Dir["DOWN"] = "down";
})(Dir || (Dir = {}));
const LETTERS = {
    'A': { points: 1, count: 9 },
    'B': { points: 3, count: 2 },
    'C': { points: 3, count: 2 },
    'D': { points: 2, count: 4 },
    'E': { points: 1, count: 12 },
    'F': { points: 4, count: 2 },
    'G': { points: 2, count: 3 },
    'H': { points: 4, count: 2 },
    'I': { points: 1, count: 9 },
    'J': { points: 8, count: 1 },
    'K': { points: 5, count: 1 },
    'L': { points: 1, count: 4 },
    'M': { points: 3, count: 2 },
    'N': { points: 1, count: 6 },
    'O': { points: 1, count: 8 },
    'P': { points: 3, count: 2 },
    'Q': { points: 10, count: 1 },
    'R': { points: 1, count: 6 },
    'S': { points: 1, count: 4 },
    'T': { points: 1, count: 6 },
    'U': { points: 1, count: 4 },
    'V': { points: 4, count: 2 },
    'W': { points: 4, count: 2 },
    'X': { points: 8, count: 1 },
    'Y': { points: 4, count: 2 },
    'Z': { points: 10, count: 1 },
    '_': { points: 0, count: 2 },
};
const LETTER_KEYS = Object.keys(LETTERS);
function shuffle(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}
function removeFirst(arr, e) {
    const i = arr.indexOf(e);
    if (i > -1) {
        arr.splice(i, 1);
    }
    return arr;
}
function search(arr, start, endMax, leftPredicate, rightPredicate) {
    for (let i = start; i >= 0; i--) {
        if (!leftPredicate(arr[i], i)) {
            break;
        }
    }
    for (let i = start + 1; i < endMax; i++) {
        if (!rightPredicate(arr[i], i)) {
            break;
        }
    }
}
class Bag {
    constructor() {
        this.letters = shuffle(Object.entries(LETTERS)
            .reduce((bag, [letter, props]) => [...bag, ...Array(props.count).fill(letter)], Array()));
    }
    draw(n) {
        console.assert(n >= 0);
        return this.letters.splice(0, n);
    }
    get isEmpty() {
        return this.letters.length === 0;
    }
    toString() {
        return this.letters.join();
    }
}
class Tile {
    get isEmpty() {
        return this.letter === undefined;
    }
}
class Tiles {
    constructor(tiles) {
        this.tiles = (tiles !== undefined)
            ? tiles
            : Array(BOARD_SIZE)
                .fill(undefined)
                .map(() => Array(BOARD_SIZE)
                .fill(undefined)
                .map(() => new Tile()));
    }
    get transposed() {
        return new Tiles(this.tiles[0].map((_, col) => this.tiles.map(row => row[col])));
    }
    getRow(row) {
        console.assert(row >= 0);
        console.assert(row < BOARD_SIZE);
        return this.tiles[row];
    }
    getCol(col) {
        console.assert(col >= 0);
        console.assert(col < BOARD_SIZE);
        return this.tiles.map(row => row[col]);
    }
    toString() {
        let str = '  ';
        for (let i = 0; i < BOARD_SIZE; i++) {
            str += i.toString(16) + ' ';
        }
        str += '\n';
        for (let i = 0; i < BOARD_SIZE; i++) {
            const row = this.tiles[i];
            str += i.toString(16) + ' ';
            for (const tile of row) {
                str += (tile.letter || '-') + ' ';
            }
            str += '\n';
        }
        return str;
    }
}
class Board {
    constructor() {
        this.tiles = new Tiles();
    }
    place(row, col, letters, dir) {
        const tiles = (dir === Dir.DOWN) ? this.tiles.transposed : this.tiles;
        if (dir === Dir.DOWN)
            [row, col] = [col, row];
        const rowTiles = tiles.getRow(row);
        let points = 0;
        const addPointsUntilBlank = (t) => {
            if (t.isEmpty) {
                return false;
            }
            points += LETTERS[t.letter].points;
            return true;
        };
        let letterIdx = 0;
        search(rowTiles, col - 1, BOARD_SIZE, addPointsUntilBlank, (t, col) => {
            if (t.isEmpty && letterIdx === letters.length) {
                return false;
            }
            const letter = letters[letterIdx++];
            if (t.isEmpty) {
                t.letter = letter;
                search(tiles.getCol(col), row, BOARD_SIZE, addPointsUntilBlank, addPointsUntilBlank);
            }
            else {
                points += LETTERS[t.letter].points;
            }
            return true;
        });
        return points;
    }
    toString() {
        return this.tiles.toString();
    }
}
class Scrabble {
    constructor(...players) {
        this.bag = new Bag();
        this.board = new Board();
        this.players = players;
        players.forEach(player => player.drawFrom(this.bag));
    }
    toString() {
        return this.board.toString();
    }
}
class Player {
    constructor(name) {
        this.points = 0;
        this.rack = [];
        this.name = name;
    }
    drawFrom(bag) {
        this.rack.push(...bag.draw(MAX_RACK_LEN - this.rack.length));
    }
    play(game, row, col, letters, dir) {
        this.points += game.board.place(row, col, letters, dir);
        letters.forEach(letter => removeFirst(this.rack, letter));
        this.drawFrom(game.bag);
    }
    toString() {
        return `${this.name} (${this.points} points) ${this.rack.join()}`;
    }
}
const player1 = new Player('TJ');
const player2 = new Player('Justine');
const game = new Scrabble(player1, player2);
console.log(game.toString());
console.log(player1.toString());
console.log(player2.toString());
function play(player, row, col, word, dir) {
    const letters = [...word].map(letter => letter);
    player.play(game, row, col, letters, dir);
    console.log(game.toString());
    console.log(player1.toString());
    console.log(player2.toString());
}
window.play1 = function (row, col, word, dir) {
    play(player1, row, col, word, dir);
};
window.play2 = function (row, col, word, dir) {
    play(player2, row, col, word, dir);
};
//# sourceMappingURL=data:application/json;base64,